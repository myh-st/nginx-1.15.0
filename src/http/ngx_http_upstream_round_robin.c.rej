--- src/http/ngx_http_upstream_round_robin.c
+++ src/http/ngx_http_upstream_round_robin.c
@@ -78,6 +81,17 @@
                 peers->peer[n].down = server[i].down;
                 peers->peer[n].weight = server[i].down ? 0 : server[i].weight;
                 peers->peer[n].current_weight = peers->peer[n].weight;
+
+#if (NGX_HTTP_UPSTREAM_CHECK)
+                if (!server[i].down) {
+                    peers->peer[n].check_index =
+                        ngx_http_upstream_check_add_peer(cf, us, &server[i].addrs[j]);
+                }
+                else {
+                    peers->peer[n].check_index = (ngx_uint_t) NGX_ERROR;
+                }
+#endif
+
                 n++;
             }
         }
@@ -131,6 +145,17 @@
                 backup->peer[n].max_fails = server[i].max_fails;
                 backup->peer[n].fail_timeout = server[i].fail_timeout;
                 backup->peer[n].down = server[i].down;
+
+#if (NGX_HTTP_UPSTREAM_CHECK)
+                if (!server[i].down) {
+                    backup->peer[n].check_index =
+                        ngx_http_upstream_check_add_peer(cf, us, &server[i].addrs[j]);
+                }
+                else {
+                    backup->peer[n].check_index = (ngx_uint_t) NGX_ERROR;
+                }
+#endif
+
                 n++;
             }
         }
@@ -189,6 +214,9 @@
         peers->peer[i].current_weight = 1;
         peers->peer[i].max_fails = 1;
         peers->peer[i].fail_timeout = 10;
+#if (NGX_HTTP_UPSTREAM_CHECK)
+        peers->peer[i].check_index = (ngx_uint_t) NGX_ERROR;
+#endif
     }
 
     us->peer.data = peers;
@@ -305,6 +333,9 @@
         peers->peer[0].current_weight = 1;
         peers->peer[0].max_fails = 1;
         peers->peer[0].fail_timeout = 10;
+#if (NGX_HTTP_UPSTREAM_CHECK)
+        peers->peer[0].check_index = (ngx_uint_t) NGX_ERROR;
+#endif
 
     } else {
 
@@ -337,6 +368,9 @@
             peers->peer[i].current_weight = 1;
             peers->peer[i].max_fails = 1;
             peers->peer[i].fail_timeout = 10;
+#if (NGX_HTTP_UPSTREAM_CHECK)
+            peers->peer[i].check_index = (ngx_uint_t) NGX_ERROR;
+#endif
         }
     }
 
@@ -414,7 +448,11 @@
 
     if (rrp->peers->single) {
         peer = &rrp->peers->peer[0];
-
+#if (NGX_HTTP_UPSTREAM_CHECK)
+        if (ngx_http_upstream_check_peer_down(peer->check_index)) {
+            return NGX_BUSY;
+        }
+#endif
     } else {
 
         /* there are several peers */
@@ -441,6 +479,12 @@
 
                     if (!peer->down) {
 
+#if (NGX_HTTP_UPSTREAM_CHECK)
+                        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
+                                       "get rr peer, check_index: %ui",
+                                       peer->check_index);
+                        if (!ngx_http_upstream_check_peer_down(peer->check_index)) {
+#endif
                         if (peer->max_fails == 0
                             || peer->fails < peer->max_fails)
                         {
@@ -451,6 +495,9 @@
                             peer->fails = 0;
                             break;
                         }
+#if (NGX_HTTP_UPSTREAM_CHECK)
+                        }
+#endif
 
                         peer->current_weight = 0;
 
@@ -489,6 +536,12 @@
 
                     if (!peer->down) {
 
+#if (NGX_HTTP_UPSTREAM_CHECK)
+                        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
+                                       "get rr peer2, check_index: %ui",
+                                       peer->check_index);
+                        if (!ngx_http_upstream_check_peer_down(peer->check_index)) {
+#endif
                         if (peer->max_fails == 0
                             || peer->fails < peer->max_fails)
                         {
@@ -499,6 +552,9 @@
                             peer->fails = 0;
                             break;
                         }
+#if (NGX_HTTP_UPSTREAM_CHECK)
+                        }
+#endif
 
                         peer->current_weight = 0;
 
